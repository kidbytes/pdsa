
THREADS:
* A process state can be defined to contain:
Environment, Working Dir, Program Instructions, Registers, Stack, Heap
File Descriptors, Signal actions, Shared Libraries, IPC tools (message queues, pipes..)

To have independent flow of control, a thread maintains its own:
Stack Pointer, Registers, Thread Specific Data, Scheduling Properties,
Set of pending and blocked signals. 

* pthread_self() returns the unique, system assigned thread ID of the calling thread.

* A thread duplicates only the essential resources it needs to be independently
schedulable.

* Common threading models:
1. Manager/Worker: RequestProcessor, ThreadPool
2. Pipeline: Each thread working on a different section of data
3. Peer: Similar to 1 but Manager also works

* Sobroutines in Pthreads API can be grouped into:
1. Thread Management
2. Mutexes for code mutual exclusion
3. Condition Variables: Address communication between threads that share a Mutex
4. Thread Synchronization: Read/Write locks and barriers

* Pthreads has API to specify how threads are scheduled for execution. For example:
FIFO, RR or other. There is no routine to bind threads to cpus/cores.

* main() should explicitly call pthread_exit() as the last thing. It will block
for the threads. Otherwise all the threads will terminate because main process
exits.

* pthread_join(threadid, status) --> blocks calling thread until specified threadid
terminates. If specified thread called pthread_exit() with status, it will be stored
in status of pthread_join. One of the attributes of a thread defines whether the thread
is joinable or detached. Only joinable threads can be joined.

* pthread_detach() is used to convert a joinable thread to detachable. There is no
converse routine.

* Changing the default stack size: pthread_attr_setstacksize(..)



THREAD POOL:
Thread pools are ideal for developing multi-threaded server applications.
The pool uses a queue to distribute work among threads. Jobs are queued for
execution as they arrive. The next available thread pickup a job.
If no threads are available new threads are created up to limit given at construction
of the thread pool. Jobs keep queueing up if all threads are busy. If threads remain
idle beyond a threshold then those threads will be destroyed. However, there is always 
a certain minumun number of threads that are maitained.

threadpool(.., minThreads, maxThreads, maxIdleTime)
--> minThreads are always active. Any thing beyond and that stays idle > maxIdleTime will
    be destroyed.

drain()             -> disable queueing and wait until all pending job complete.
enqueueJob(functor) -> functor will be executed by the next available thread.
                       Return 0 on success or non-zero if queueing is currently disabled.
shutdown()          -> disable queueing, cancel all queued jobs and shut down threads.                    
                       Wait for completion?
start()             -> enable queueing, spawn min threads.                       
stop()              -> disable queueing, wait for pending jobs to complete and then shutdown.

MUTEX:
* Thread Synchronization and protecting shared data when multiple writes occur.
There is ownership to a mutex. Only one thread can own it at a time.

* You can use trylock to make an unblocking call to lock a mutex.

CONDITION VARIABLES:
* Mutexes implement synchronization by controlling thread access to data. Condition
variables allow threads to synchronize based upon the actual value of data. Without
condition variables, we have to use continuous polling (possibly in a critical section),
to check if the condition is met. We need a mutex here because we are checking some 
shared state in two places. One sets it and one checks it - possibly in 2 different threads.
And this data must be protected from race conditions. OS wakes up the waiting thread when
condition is met and when signal()/broadcast() is called. The loop is not executed continuosly. 
Instead the thread sleeps. 

//Checking
	mutex.lock();
	while (false == predicate()) {         
	    condition.wait(&mutex);  //mutex will be unlocked & code blocked atomically
	}
	
	..
	//mutex will be locked when wait returns
	mutex.unlock();


//Setting
	mutex.lock();
	setPredicateTrue();
	condition.signal();  //Wakeup waiting thread. We also have broadcast() which wakes many threads
	muntex.unlock();
	
// Do we really need to use some predicate?
mutex.lock()
condition.wait(&mutex)   //wait
mutex.unlock()
	--> we need mutex above because wait() takes a mutex.
	    Plus mutex must be locked and unlocked as per the specification

condition.signal();      //wakeup waiting thread
	--> When we don't have a shared state, do we need mutex here?
	
What happens when signal() happens before wait(). Looks like the waiting thread will wait forever.
To solve this problem we need a predicate. The wait will happen only if predicate is false. 
If it is true, we will never enter the loop. 

In cases where we know wait is always going to happen before signal predicate may not be needed.
If caller and setter are in different threads then we will need a predicate.

	
BARRIER:
Job is composed of a sequence of steps. All the threads have to finish a step
before proceeding to the next step. So, they need to synchronize at each step.

barrier(int N)  ==> N threads have to call wait() before the barrier will be released
and all the threads are released. When each thread calls wait() a counter is decremented
and the thread enters a wait state. When the Nth thread calls wait(), the counter becomes
zero and all threads are released and the barrier count is reset to N.

wait()
timedWait(n)
numThreads() -> Number of threads that must be called before all threads will be unblocked.
                Guess, the internal counter value.


LATCH:
A master thread is controlling all slave threads and must wait for them to finish
before proceeding. When a slave thread finishes it need not wait or block for others
to catchup. It just has to call arrive and return. In this way the thread can be 
returned to Thread Pool and can process other request.

Latch is for one time use unlike barrier. The counter is never reset.

Latch(int N)     ==> N threads have to call arrive() before all threads will be unblocked.
arrive()         -> decrement counter by 1
arriveAndWait()  -> arrives and blocks like a thread in Barrier.
countDown(int N) -> decrement the counter by N.
currentCount()
tryWait()        -> return true if count==0. Non-blocking.

The main thread calls latch.wait() which blocks until count become 0.


SEMAPHORE:
A semaphore with a count of 1 can be used as a mutex.
If count > 0 then it can be used for resource sharing.
semaphore()       -> initial count 0
semaphore(int N)  -> initial count N
post()            -> increment count by 1
post(int N)       -> increment count by N
wait()            -> block until count > 0, then decrement count atomically and return.


** On a semaphore a thread blocks when the count is 0.
** For a barrier and latch all threads unblock when the count is 0.
** For mutex and semaphore only one thread is unblocked when conditions are met.
** For condition variable, barrier and latch several threads will be unblocked.
** cond.broadcast() unblocks several thread and cond.signal() unblocks only one thread,

PRODUCER-CONSUMER
One or more producers and one or more consumers
Requests are put in Q by producers and removed by consumers.

// Producer thread
for (int i=0; i < 100; i++) {
	Request req(i);
	mtx.lock();
	que.push_back(req);
	mtx.unlock();
	cond.signal();
}

// Consumer thread
while (true) {
	mtx.lock();
	while (que.size() == 0) {
		cond.wait(mtx);
	}
	Request req = que.pop_front();
	mtx.unlock();
	
	req.process();
	
	return;
}
	
// Main thread
main() {
	producerThread.join();
	consumerThread.join();	
}

READER WRITER LOCK:
Generally used for resources which are frequently read and less frequently updated.
RW-Locks provide 2 distinct lock states - read lock and writer lock.
Multiple callers can simultaneously acquire a read lock but only one write lock
may be active at any given time. 

If a read lock is attempted and there are no active or pending write locks, the lock
will be immediately granted. Otherwise, the reader will block till all active/pending
write locks are released.

A write lock is mutually exclusive.

A read lock can be converted to write lock in 2 modes: optimistic or pessimistic.
Optimistic: Conversion is not gu aranteed to be atomic. 
Read lock is released and then a write lock is acquired. In the mean time it is
possible a read or write lock was acquired and the state of the data was changed. 
So condition has to re-evaluated after a write lock was acquired.

Pessimistic: Conversion is atomic. No chance of state of data to be changed.

Example:
getUserInfo() {
	lock.lockRead();
	auto it = map.find(userId);
	..
	lock.unlock()
	return *it;
}	


updateUserInfo() {
	lock.lockRead();  //1st determine if data exists
	auto it = map.find(userId);
	if (!it)
		return false;
	
	lock.upgradeToWriteLock()  //optimistic
	it = map.find(userId);
	if (!it) {
		lock.unlock();
		return false;	
	}
	update(it);
	lock.unlock()
	return true;
}

lockRead()            -> locks for read
lockReadReserveWrite  -> locks for read and when upgradeToWriteLock() is called,
                      -> lock is converted to write lock atomically
lockWrite()           -> locks for write
upgradeToWriteLock()  -> return 0 if upgrade happened atomically else non-zero
unlock                -> unlock read or write lock based on context





SINGLE WRITER / MULTIPLE READER

barrier(numReaders + 1)  //1 for writer
int readerCount
Writer:
while (true) {
	mutex.lock()
	write(buffer)
	mutex.unlock()
	cond.broadcast() //Wakeup all reading threads
	barrier.wait()
}

Reader:
while (true) {
	mutex.lock()
	while (buffer.empty()) {
		cond.wait(mutex) //Wait till buffer has some data
	}
	mutex.unlock();  //When data is available, release the lock immediately
	                 //so that other threads can read too
	read(buffer)
	barrier.wait()
}



WIKIPEDIA: Using 2 mutexes
beginRead() {
	lock r
	increment b
	if (b == 1) 
		lock g
		
	unlock r
}

endRead() {
	lock r
	decrement b
	if (b == 0)
		unlock g
		
	unlock r
}

write() {
	lock g
	write
	unlock g
}

READING FROM 2 STREAMS:

struct SyncObject {
	Condition cond;
	Mutex mtx;
	bool dataAvailable;
	int streamNum;
	Tuple t;
	
	SyncObject(int streamNum) {
		dataAvailable = false;
		this->streamNum = streamNum;
	}
}


Mutex writeMtx;
Tuple t;
int streamNum;


// 2 Threads will be running for 2 streams
void thread_func(Stream& s, int streamNum, SyncObject& sync) {

	while (true) {
		// Blocking call
		Tuple t = s.poll();
		writeMtx.lock();
		sync.mtx.lock();
		sync.t = t;
		syn.streamNum = streamNum
		sync.mtx.unlock();
		sync.signal();
	}
}




void main() {
	list<Tuple> l1, l2;
	SyncOjbect sync;
	pthread t1 = pthread_create(thread_func, 1, sync);
	pthread t2 = pthread_create(thread_func, 2, sync);
	
	sync.mtx.lock();
	while (sync.dataAvailable == false) {
		sync.cond.wait(sync.mtx);
	}
	
	if (sync.streamNum == 1) {
		print_and_clean(l2, sync.t);
		l1.push_back(sync.t);
	} else {
		print_and_clean(l1, sync.t);
		l2.push_back(sync.t);
	}
	
	sync.dataAvailable = false;
	sync.mtx.unlock();
}

void print_and_clean(list<Tuple>& l, Tuple t) {
}
	
	
	

}

	
}



WRITER:
We can write if the following are true:
	1. No other Writer
	2. No Reader
	
READER:
    * There is something in buffer
	* No Writer
	
A writer needs exclusive access so we can use mutex	
Need a condition variable for readers


Semaphore readerCount;


void write() {
	writerMutex.lock();
	
}
void read() {
	mtx1.lock();
	while(writerCount != 0) {
		cond1.wait(&mtx1);
	}
	readerCount++;
	read()...
	readerCount--;
	if (readerCount == 0)
		cond2.signal();
		
	mtx1.unlock();
}

void write() {
	
}

1. can use semaphore for counting
ReadSem
class AllocateReader {
}

def write():
	hMutexWriter.lock()
	
	
	
	
READING FROM 2 STREAMS

struct SyncObject {
	Condition cond;
	Mutex mtx;
	bool dataAvailable;
	Tuple tuple;
	Mutex readMtx
}	

void threadFunc(Stream s, SyncObject& sync) {

	while (true) {
		Token t = s.poll();
		
		sync.mtx.lock();
		sync.dataAvailable = true;
		cond.signal()
		sync.mtx.unlock();
		
		// Block until the data is read
		sync.readMtx.lock();
	}
}

void main() {
	Stream s1, s2;
	SyncObject sync1, sync2;
	
	list<Tuple> l1;
	list<Tuple> l2;
	
	Thread t1 = threadFunc(s1, sync1);
	Thread t2 = threadFunc(s2, sync2);
	
	while (true) {
		sync1.readMtx.lock();
		sync2.readMtx.lock();
		
		//Read from 1st stream
		sync1.mtx.lock();
		while (!sync1.dataAvailable) {
			sync1.cond.wait();
		}
		sync1.mtx.unlock();
		print_and_clean(l1, sync1.tuple);
		l1.push_back(sync1.tuple);
		sync1.readMtx.unlock();
			
		//Read from 2nd stream
		sync2.mtx.lock();
		while (!sync2.dataAvailable) {
			sync2.cond.wait();
		}
		sync2.mtx.unlock();
		print_and_clean(l2, sync2.tuple);
		l2.push_back(sync2.tuple);	
		sync2.readMtx.unlock();
		
		
	}
	
	
	
	t1.join();
	t2.join();
	

}

void print_and_clean( list<Tuple>& lst, const Tuple& t) {
	if (lst.empty())
		return;
		
	using Iter = list<Tupe>::iterator;
	Iter iter = lst.begin();
	while (iter != lst.end()) {
		if (abs(t.time - iter->time) > 1000) {
			break;
		} 

		cout << iter->data << ", " t.data << endl;
	}
	
	lst.erase(lst.begin(), iter);
}