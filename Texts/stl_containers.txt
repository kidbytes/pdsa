*** VECTOR
vector<int> first;                                // empty vector of ints
vector<int> second (4,100);                       // four ints with value 100
vector<int> third (second.begin(),second.end());  // iterating through second
vector<int> fourth (third);                       // a copy of third

// the iterator constructor can also be used to construct from arrays:
int myints[] = {16,2,77,29};
std::vector<int> fifth (myints, myints + sizeof(myints) / sizeof(int) );

* assign(): Replace current contents with new contents and update size accordingly. 
Automatic reallocation if required

first.assign (7,100);             // 7 ints with a value of 100
second.assign (first.begin(),first.end()-1); // the 5 central values of first

* at(i): Returns a ref at index i. Checks index bounds and throws out_of_range exception

* capacity(): >= size. Allocated storage capacity of the vector
Altered by reserve()

* clear(): Removes all elements leaving the container with a size of 0

* erase(pos): Erases item at position pos. Causes reallocation. Range version available too.

* front() / back(): Returns a ref to first/last element of the vector

* insert(pos, val) : Inserts val at pos. The current element appears after val

* void pop_back(): Removes the last element. Size is reduced by 1

* reserve(n): Increases the capacity to contain n elements. If the current capacity
is > n already then the call does nothing.

* resize(n): Resizes the vector to n. Can reallocate or truncate the vector i.e items
are inserted or erased. In the end size() returns n 

* swap(dest): swaps the current container with dest. Existing iterators, pointers and references
are valid and point to the same elements but in the other container.


*** LIST
* Implemented as doubly linked lists
* Constant insert and erase anywhere within the sequence and iteration in both directions.

* Lack direct access to the elements by their position. 

* assign(): Replace current contents with new contents and update size accordingly

* front() / back(): Returns a ref to first/last element

* clear(): Removes all elements leaving the container with a size of 0

* erase(pos): Removes single element at pos. Has range version too.

* insert(pos, val): Inserts new element at pos. Existing element appears after inserted element
Has range version too.

* merge(x): merges all elements in x at their respective positions.
This removes all elements in x. Elements are just transfered. Not ctr/dtr calls.

* void pop_back()/pop_front(): Removes last/first element

* void push_back()/push_front(): Add a new element at end/front

* remove(val): Removes all elements that compare equal to val. dtr is called

* remove_if (pred): Removes all elements for which pred returns true

* resize(): Same as vector. Resizes the container so that it contains n elements.
Possible truncation or reallocation.

* reverse(): Reverses the order of elements

* sort(cmp): Sorts the elements. If comp is missing uses operator <.
Comparison should produce a strict weak ordering of elements.

* splice(pos, x): Transfers elements from x into the container, inserting them at pos.
This alters the size of both containers.
splice(iterator pos, list& x, iterator i)
	-> transfers element at i from x and inserts at position pos
splice(iterator pos, list& x, iterator begin, iterator end)
    -> range version of above

* swap(x): Swaps container with x.

* unique(): If list is sorted, this method removes duplicates.


*** DEQUE
* Double ended queues are sequence containers that can expand/contract on both ends.

* Supports random access iterators

* There is no reserve() and capacity()

* Not guaranteed to store elements in contiguous storage locations. Can't use pointer arithmetic.
But can use random access iterators.

* front() / back()

* push_back() / push_front()

* pop_back() / pop_front()

* insert() / erase()

* swap()


*** SET
* set<int, classcomp> x; //Comparison class is classcomp with operator() overloaded

* Stores unique elements in a sorted order which may be different from the order in 
which elements were inserted. Typically implemented as BSTs.

* Once in the set they cannot be modified.

* pair<iterator, bool> insert(): Extends the container by inserting new element.
If the key already exists, item is not inserted and bool is set to false.

* clear(): Removes all elements, leaving the container with size 0.

* count(val): Returns count of elements that are equivalent to val

* find(val): Returns a iterator to val if found. Otherwise, return set::end()
Returns an iterator pointing to elements of type value_type. value_type is an alias
to type of items stored in set.

* lower_bound(val): Returns an iterator to first element >= val
If val is there, iterator to it is returned. Otherwise, iterator to next element is returned.

* upper_bound(val): Returns an iterator to the first element > val
1 1 2 3  - lower_bound(1) returns 0 index and upper_bound(1) return 2 index

* equal_range(val): Returns a [lower_bound, upper_bound) range for elements equivalent to val
Returns a pair of iterators

* erase(iter)  : Erases an element by iterator. Range version available too
  erase(value) : Erases by value. value is of value_type

* swap(x): Swaps this container wih x


*** MULTISET
* find(val): Returns an iterator to any of the matching val.
To get all matching elements, use equal_range()

* erase(): Same as set. When value is provided multiple values will be removed.

*** MAP
* Associative container. Sorted on keys

* at(key): Returns a reference to mapped value identified with key k.
If not available throws out_of_range exception

* find(key): Returns a iterator to key if found. Otherwise, return set::end()
Returns an iterator pointing to elements of type value_type. value_type is an alias
to pair<const key_type, mapped_type>

* clear(): Removes all elements, leaving the container with size 0.

* count(key): Returns number of occurences of key

* equal_range(): Same as set

* pair<iterator, bool> insert(): Extends the container by inserting new element.
If the key already exists, item is not inserted and bool is set to false.

* operator[](key): If key exists, function returns a reference to its mapped value.
Otherwise, it inserts a new element with that key and default value_type and returns a reference to it.

* swap(): Same as set



*** UNORDERED MAP
Uses hashing to store key -> value
The map has several buckets and each key hashes to a bucket.
The map can be considered to be an array of buckets.
A bucket is represented by an index in the map.
Several keys can hash to a single bucket as in regular hashing.
Constant complexity on average for retrieving keys. 
Faster than stl::map but not efficient for range based queries.

Container Properties:
Associative: Elements are accessed by keys and not by position
Unordered: Uses hash tables to fast access by key
Map: Key -> value association
Unique Keys: No two keys can be equivalent
Allocator-aware: Uses allocator obj to dynamically handle storage needs

Template Parameters:
Key: Type of key aliased as unordered_map::key_type
T:   Type of mapped value as unordered_map::mapped_type
Hash: Unary function object that hashes a key to return size_t 
      Default is hash<key>
	  Aliased as unordered_map::hasher
Pred: A binary predicate to determine if 2 keys are equivalent
      No two keys in the map should return true technically.

Iterator of this map points to an object of type pair<const Key, T> and this 
is aliased as unordered_map::value_type
it->first is the key
it->second is the value


Same methods as a stl:map with a few more.

* bucket_count(): Return the number of buckets
* bucket_size() : Number of keys that belong to this bucket.
* bucket()      : Given a key returns the bucket (index) to which it belongs.
* max_bucket_count(): System max. size_t type.

* load_factor():  numElements / numBuckets i.e numElements per bucket
                  Influences probability of collision. If the load factor
				  increases beyond a certain threshold, numBuckets is increased
				  

* max_load_factor(): Get/Set threshold of load_factor. If this threshold is reached,
                     rehashing is done. Default max_load_factor is 1 meaning
					 numBuckets == numElements. Remember each bucket may
					 contain more than one key. Even if all keys map to the
					 same bucket the load factor still can be 1. It is just that
					 other buckets are empty. 
					 Default load factor can be less than 1 - more buckets than keys.


* rehash(n): Sets the number of buckets to n or more. 
             A rehash is the reconstruction of the hash table. All keys are 
			 rearragned to new set of buckets. Rehashes are automatically
			 performed when max_load_factor is surpassed.
			 If n is lower than the current number of buckets it a no-op.
     
* reserve():

* hash_function(): Get hash function
* key_eq(): Get key equivalence predicate
                 
*** PRIORITY_QUEUE
* top():   Access top element
* push():  Insert element
* pop():   Remove top element
priority_queue<int> first;
priority_queue<int> second (myints,myints+4);
priority_queue<int, std::vector<int>, std::greater<int> >
                            third (myints,myints+4);                 

*** BITSET
#include <bitset>
Stores bits with only 2 possible alues: 0 or 1, true or false
Emulates an array of bool elements but occupies only 1 bit.
Each position is accessed by position: foo[3] is 4th bit.
Individual bits are accessed as special reference type bitset::reference.
Size of bitset is fixed at compile time as a template parameter

count()  : number of bits set
size()   : number of bits in bitset
test(n)  : returns value of nth bit (0 or 1)
any()    : Test if any bit is set
none()   : Test if no bit is set
all()    : Test if all bits are set
set()    : set all bits
set(pos, bool) : set bit at pos with value bool value
reset()  : reset all bits to 0
reset(pos): reset bit at pos to 0
flip()    : flip all bits
flip(pos) : flip the bit at pos

to_string() : string representation of the bit pattern
to_ulong() : long value of the bit representation

std::bitset<4> foo;
foo.set();
foo.to_ulong(); //returns 15

Constructors:
bitset<16> bar(0xfa2);
bitset<16> baz("0101111001");

==========
ALGORITHMS
==========
bool all_of(begin, end, unaryPredicate) --> true if pred returns true for all elements
bool any_of --> returns true if at least one returns true
bool none_of --> returns true if pred returns false for all elements


Function for_each(begin, end, Function fn)
for each item invoke fn(item). Return value of fn is ignored. fn is returned.

iterator find_if(begin, end, UnaryPredicate)
find_if_not --> return 1st elem for which pred returns false


find_end(first1, last1, first2, last2)
Searches the range [first1,last1) for the last occurrence of the sequence defined by 
[first2,last2), and returns an iterator to its first element, or last1 if no occurrences 
are found.


Non-modifying sequence operations:
all_of 
Test condition on all elements in range (function template )

any_of 
Test if any element in range fulfills condition (function template )

none_of 
Test if no elements fulfill condition (function template )

for_each
Apply function to range (function template )

find
Find value in range (function template )

find_if
Find element in range (function template )

find_if_not 
Find element in range (negative condition) (function template )

find_end
Find last subsequence in range (function template )

find_first_of
Find element from set in range (function template )

adjacent_find
Find equal adjacent elements in range (function template )

count
Count appearances of value in range (function template )

count_if
Return number of elements in range satisfying condition (function template )

mismatch
Return first position where two ranges differ (function template )

equal
Test whether the elements in two ranges are equal (function template )

is_permutation 
Test whether range is permutation of another (function template )

search
Search range for subsequence (function template )

search_n
Search range for elements (function template )


Modifying sequence operations:
copy
Copy range of elements (function template )

copy_n 
Copy elements (function template )

copy_if 
Copy certain elements of range (function template )

copy_backward
Copy range of elements backward (function template )

move 
Move range of elements (function template )

move_backward 
Move range of elements backward (function template )

swap
Exchange values of two objects (function template )

swap_ranges
Exchange values of two ranges (function template )

iter_swap
Exchange values of objects pointed to by two iterators (function template )

transform
Transform range (function template )

replace
Replace value in range (function template )

replace_if
Replace values in range (function template )

replace_copy
Copy range replacing value (function template )

replace_copy_if
Copy range replacing value (function template )

fill
Fill range with value (function template )

fill_n
Fill sequence with value (function template )

generate
Generate values for range with function (function template )

generate_n
Generate values for sequence with function (function template )

remove
Remove value from range (function template )

remove_if
Remove elements from range (function template )

remove_copy
Copy range removing value (function template )

remove_copy_if
Copy range removing values (function template )

unique
Remove consecutive duplicates in range (function template )

unique_copy
Copy range removing duplicates (function template )

reverse
Reverse range (function template )

reverse_copy
Copy range reversed (function template )

rotate
Rotate left the elements in range (function template )

rotate_copy
Copy range rotated left (function template )

random_shuffle
Randomly rearrange elements in range (function template )

shuffle 
Randomly rearrange elements in range using generator (function template )


Partitions:
is_partitioned 
Test whether range is partitioned (function template )

partition
Partition range in two (function template )

stable_partition
Partition range in two - stable ordering (function template )

partition_copy 
Partition range into two (function template )
partition_point 
Get partition point (function template )

Sorting:
sort
Sort elements in range (function template )

stable_sort
Sort elements preserving order of equivalents (function template )

partial_sort
Partially sort elements in range (function template )

partial_sort_copy
Copy and partially sort range (function template )

is_sorted 
Check whether range is sorted (function template )

is_sorted_until 
Find first unsorted element in range (function template )

nth_element
Sort element in range (function template )


Binary search (operating on partitioned/sorted ranges):
lower_bound
Return iterator to lower bound (function template )

upper_bound
Return iterator to upper bound (function template )

equal_range
Get subrange of equal elements (function template )

binary_search
Test if value exists in sorted sequence (function template )


Merge (operating on sorted ranges):
merge
Merge sorted ranges (function template )

inplace_merge
Merge consecutive sorted ranges (function template )

includes
Test whether sorted range includes another sorted range (function template )

set_union
Union of two sorted ranges (function template )

set_intersection
Intersection of two sorted ranges (function template )

set_difference
Difference of two sorted ranges (function template )

set_symmetric_difference
Symmetric difference of two sorted ranges (function template )


Heap:
push_heap
Push element into heap range (function template )

pop_heap
Pop element from heap range (function template )

make_heap
Make heap from range (function template )

sort_heap
Sort elements of heap (function template )

is_heap 
Test if range is heap (function template )

is_heap_until 
Find first element not in heap order (function template )

Min/max:
min
Return the smallest (function template )

max
Return the largest (function template )

minmax 
Return smallest and largest elements (function template )

min_element
Return smallest element in range (function template )

max_element
Return largest element in range (function template )

minmax_element 
Return smallest and largest elements in range (function template )

Proficiency in C++ including STL
Deep understanding of object-oriented design, data structures and algorithms
You can bring leadership and mentoring expertise
Take responsibility for the full software development life-cycle
You are familiar with the nuances of building high volume, high availability distributed systems
architecture, processes, best practices and direction of this initiative to fulfill our vision
Excellent understanding of algorithms, data structures, object-oriented design and multi-threading.
Deep knowledge of Hadoop MapReduce, HBase, and other Hadoop ecosystem technological`