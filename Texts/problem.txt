1. Wood Cutter DP 

Let wi be widths
Let pi be spot prices
Input: n" wide log
Goal: Maximize profits
	  Find a combination of wi such that sum of profits is maximum
	  
	  
Compute max profit for i=1 to n

W[i] --> Widths
P[i] --> Profits

Let the last cut have width x.
Then S[n] = s[n-x] + P[x]
Since x can be any cut, we compute for every x and pick the optimal cut
So, we compute for all widths : 1,2,3,..n"
Some of the widths may not exist but we still compute.
We compute from bottom up.
S[0] = 0
S[1] = S[0] + P[1]



maximum of (P1, P4), (P2, P3), (P5)
The combinations will explode when n gets large

Solution:
Assume the very last cut in the best solution is ik
Best(n) = Pik + Best(n-ik)

Number of options for the last cut = number of available cuts
Try every possible cut and see what gives maximum profit.
Best(n) = for (int i=1; i <= n ; i++)
			max (P[i] + Best(n-W[i]));


S[n] = S[n-i] + P[i]
S[1] = S[0] + P[1]
S[2] = S[0] + P[2], S[1] + P[1]

for i=1 to n: 			//For all capacities
	B[i] = -infinity
	for j=1 to i		//For all cuts till current capacity in loop
		t = P[j] + B[i-j]
		if t > B[i]
			B[i] = t
			
		

	I[n]: Available widths
	V[n]: Value of each piece
	C   : Available capacity
	S[C]: Solution set
	
Goal: a. Maximize Value subject to total width <= C
      b. Objects can be repeated
      
if 
	I[x] is the last piece for some x, in S[C]
then
	S[C - I[x]] is optimum for  C - I[x] capacity
	i.e. S[C - I[x]] + V[x] is optimim for C

We need to find right x by brute force

C - I[x] is the reduced capacity

Example I[3]  = {1,2,3}
        V[3]  = {3,7,4}
        C     = 10
        S[10] = {1,2,3,4,5,6,7,8,9,10}
        
        S[10] = S[9] + 3  ||
                S[8] + 7  ||
                S[7] + 4
                
        	--> Whichever is maximum
        
        S[9] =  S[8] + 3 ||
                S[7] + 7 ||
                S[6] + 4
                
We need to compute the values bottom up
Let S[0] = 0

S[1] = S[0] + 3 = 3

S[2] = S[1] + 3 || 
       S[0] + 7                
     = 7
     
for (int c=1; c <= C; c++) {
	int maxVal = 0;
	for (int i=1; i <= c; i++) {
		if (I[i] > c)
			continue;
			
		if (S[c-i] + V[i] > maxVal)
			maxVal = S[c-i] + V[i];		
	}
	S[c] = maxVal;
}      

prod = (prod * a[i])/a[i-2]
if (prod > maxProd)
	maxProd = prod
i++


if (x == A[mid]):
	return mid;
if (A[mid] > A[right]): // decreasing or circular 54321,  4560123 
	if (x < A[mid]:
		left = mid+1
	else:
		right = mid-1
else:  // increasing or circular 
	if (x < A[mid]):
		
	
	rfind(x, left, right)
		
	

